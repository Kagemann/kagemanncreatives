name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Code Quality and Linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
      
    - name: Run Prettier check
      run: npm run format:check
      
    - name: Run PHP linting
      run: |
        find . -name "*.php" -not -path "./node_modules/*" -not -path "./vendor/*" -exec php -l {} \;
        
    - name: Check file permissions
      run: |
        find . -name "*.sh" -not -executable -exec echo "Script not executable: {}" \;
        
  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
  # WordPress Specific Tests
  wordpress:
    name: WordPress Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo
        coverage: none
        
    - name: Install Composer dependencies
      run: |
        cd wp-starter
        composer install --no-dev --optimize-autoloader
        
    - name: Download WordPress
      run: |
        wget https://wordpress.org/latest.tar.gz
        tar -xzf latest.tar.gz
        mv wordpress/* ./
        rm -rf wordpress latest.tar.gz
        
    - name: Setup WordPress test configuration
      run: |
        cp wp-config-sample.php wp-config.php
        sed -i "s/database_name_here/wordpress_test/g" wp-config.php
        sed -i "s/username_here/root/g" wp-config.php
        sed -i "s/password_here/root/g" wp-config.php
        sed -i "s/localhost/127.0.0.1/g" wp-config.php
        
    - name: Install WordPress
      run: |
        wp core install --url="http://localhost" --title="Test Site" --admin_user="admin" --admin_password="admin" --admin_email="admin@example.com" --allow-root
        
    - name: Activate theme
      run: |
        wp theme activate child-theme --allow-root
        
    - name: Run WordPress tests
      run: |
        wp plugin list --allow-root
        wp theme list --allow-root
        
  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
      
    - name: Run Lighthouse CI
      run: |
        lhci autorun --upload.target=temporary-public-storage
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        
  # Build and Deploy
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality, security, wordpress]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
      
    - name: Build assets
      run: |
        npm run build
        cd wp-starter && composer install --no-dev --optimize-autoloader
        
    - name: Create deployment package
      run: |
        tar -czf kagemann-creatives-$(date +%Y%m%d-%H%M%S).tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=.github \
          --exclude=*.log \
          --exclude=.DS_Store \
          .
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-package
        path: kagemann-creatives-*.tar.gz
        
  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-package
        
    - name: Deploy to staging server
      run: |
        echo "Deploying to staging server..."
        # Add your staging deployment commands here
        # Example: rsync, scp, or deployment script
        
    - name: Run staging tests
      run: |
        echo "Running staging tests..."
        # Add staging-specific tests here
        
  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-package
        
    - name: Deploy to production server
      run: |
        echo "Deploying to production server..."
        # Add your production deployment commands here
        # Example: rsync, scp, or deployment script
        
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add production health checks here
        
    - name: Notify deployment success
      run: |
        echo "Deployment successful!"
        # Add notification logic here (Slack, email, etc.)
        
  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Cleanup old artifacts
      run: |
        echo "Cleaning up old artifacts..."
        # Add cleanup logic here
